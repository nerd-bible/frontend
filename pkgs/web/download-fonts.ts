import { execSync } from "node:child_process";
import { readFileSync, unlinkSync, writeFileSync } from "node:fs";
import { join } from "node:path";
import { download } from "@nerd-bible/node";
import { type Font, parse } from "opentype.js";

const cssOutPath = join(import.meta.dir, "./src/fonts.css");

const main =
	"https://github.com/notofonts/notofonts.github.io/raw/refs/heads/main/fonts/";
// const cjk = "https://github.com/notofonts/noto-cjk/raw/refs/heads/main/";
// TODO: figure out if can use https://github.com/notofonts/noto-cjk-varco
const fontFamilies = {
	"noto/sans": {
		base: `${main}NotoSans/unhinted/variable/NotoSans%5Bwdth,wght%5D.ttf`,
		"base-italic": `${main}NotoSans/unhinted/variable/NotoSans-Italic%5Bwdth,wght%5D.ttf`,
		hebrew: `${main}NotoSansHebrew/unhinted/variable/NotoSansHebrew%5Bwdth,wght%5D.ttf`,
		// jp: `${cjk}Sans/Variable/TTF/Subset/NotoSansJP-VF.ttf`,
		// kr: `${cjk}Sans/Variable/TTF/Subset/NotoSansKR-VF.ttf`,
		// "zh-hans": `${cjk}Sans/Variable/TTF/Subset/NotoSansSC-VF.ttf`,
		// "zh-hant-hk": `${cjk}Sans/Variable/TTF/Subset/NotoSansHK-VF.ttf`,
		// "zh-hant-tw": `${cjk}Sans/Variable/TTF/Subset/NotoSansTC-VF.ttf`,
	},
	"noto/serif": {
		base: `${main}NotoSerif/unhinted/variable/NotoSerif%5Bwdth%2Cwght%5D.ttf`,
		"base-italic": `${main}NotoSerif/unhinted/variable/NotoSerif-Italic%5Bwdth,wght%5D.ttf`,
		hebrew: `${main}NotoSerifHebrew/unhinted/variable/NotoSerifHebrew%5Bwdth,wght%5D.ttf`,
		// jp: `${cjk}Serif/Variable/TTF/Subset/NotoSerifJP-VF.ttf`,
		// kr: `${cjk}Serif/Variable/TTF/Subset/NotoSerifKR-VF.ttf`,
		// "zh-hans": `${cjk}Sans/Variable/TTF/Subset/NotoSansSC-VF.ttf`,
		// "zh-hant-hk": `${cjk}Sans/Variable/TTF/Subset/NotoSansHK-VF.ttf`,
		// "zh-hant-tw": `${cjk}Sans/Variable/TTF/Subset/NotoSansTC-VF.ttf`,
	},
	"noto/mono": {
		base: `${main}NotoSansMono/unhinted/variable/NotoSansMono%5Bwdth%2Cwght%5D.ttf`,
	},
};

const fontFaces: Array<{
	name: string;
	style: string;
	weight: string;
	unicodeRange: string;
	path: string;
}> = [];

function getFace(parsed: Font, path: string) {
	// weights
	let weightMin: number | undefined;
	let weightMax: number | undefined;
	const weightClasses: Record<string, number> = (parsed as any).usWeightClasses;
	for (const wname in weightClasses) {
		const n = weightClasses[wname];
		if (!weightMin || n < weightMin) weightMin = n;
		if (!weightMax || n > weightMax) weightMax = n;
	}
	// range gathering
	let unicodeRange = "";
	const codepoints: number[] = [];
	for (let i = 0; i < parsed.glyphs.length; i++) {
		const g = parsed.glyphs.get(i);
		for (const cp of g.unicodes) codepoints.push(cp);
	}
	codepoints.sort((a, b) => a - b);
	// range finding
	const fmtN = (n: number) => n.toString(16).padStart(4, "0").toUpperCase();
	let start = codepoints[0];
	const isPrintable = /[^\p{C}]$/u;
	const delimeter = ", ";
	for (let i = 1; i < codepoints.length; i++) {
		const end = codepoints[i - 1];
		if (
			end + 1 !== codepoints[i] &&
			isPrintable.test(String.fromCodePoint(end))
		) {
			unicodeRange +=
				end === start ? `U${fmtN(start)}` : `U+${fmtN(start)}-${fmtN(end)}`;
			unicodeRange += delimeter;
			start = codepoints[i];
		}
	}

	return {
		name: parsed.names.fontFamily.en,
		style: parsed.names.fontSubfamily.en.toLowerCase(),
		weight: `${weightMin} ${weightMax}`,
		unicodeRange: unicodeRange.substring(
			0,
			unicodeRange.length - delimeter.length,
		),
		path,
	};
}

for (const family in fontFamilies) {
	for (const font in fontFamilies[family]) {
		const endPath = join("fonts", family, `${font}.ttf`);
		const path = join(import.meta.dir, "public", endPath);
		await download.file(fontFamilies[family][font], path);
		// Get info for CSS @font-face
		const parsed = parse(readFileSync(path).buffer);
		const face = getFace(parsed, endPath.replace(/\.ttf$/, ".woff2"));
		fontFaces.push(face);
		// Compress to woff2 to save major disk+network
		// Requires https://github.com/google/woff2 in PATH
		execSync(`woff2_compress ${path}`);
		unlinkSync(path);
	}
}

writeFileSync(
	cssOutPath,
	fontFaces.reduce(
		(acc, face) => {
			acc += `

@font-face {
	font-family: "${face.name}";
  font-style: ${face.style};
  font-weight: ${face.weight};
  font-display: swap;
  src: url(/${face.path}) format('woff2');
  unicode-range: ${face.unicodeRange};
}`;
			return acc;
		},
		`/** Autogenerated by ${import.meta.file} */`,
	),
);
console.log("wrote", fontFaces.length, "faces to", cssOutPath);
